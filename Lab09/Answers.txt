A. There is 1 API endpoint this application supports. It is implemented on line 122 of the pom.xml where it is defining a hostname as ${endpoints.project.id}.appspot.com
B.
	i. JDBC
	ii. 
		1. JDBC statement objects need to get each data table as a list of rows (Players in this case) and need more work to go into finding data you want vs. SQL query statements which are very simple.
		2. SQL relations return tables of tuples while List<Player> is a list of java objects, and the JDBC result set is a list of tuples with data.
	iii. getValueStringOrNull() would be used whenever the user wants display something that is could potentially be NULL.
  		In PlayerResource.java it's  being used to retrieve and display the player's name. 
C.
	i. Provides an object-oriented way to represent and manipulate player "objects"
    		from the traditional (non-object-oriented) Monopoly base.
	ii. In the player table we don't have any methods. Rather, we use queries to get
    		the data. Player DAO serve does have different methods that can be implemented
    		in a object-oriented fashion.